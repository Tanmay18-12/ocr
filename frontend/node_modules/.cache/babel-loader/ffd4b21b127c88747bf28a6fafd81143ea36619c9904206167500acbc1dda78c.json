{"ast":null,"code":"import axios from 'axios';\n\n// Direct connection API service (bypasses proxy issues)\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add CORS headers to all requests\napi.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\napi.defaults.headers.common['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS';\napi.defaults.headers.common['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization';\n\n// Enhanced request interceptor with detailed logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('🚀 DIRECT API Request:');\n  console.log('  Method:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase());\n  console.log('  Full URL:', config.baseURL + config.url);\n  console.log('  Headers:', config.headers);\n  console.log('  Timeout:', config.timeout);\n  return config;\n}, error => {\n  console.error('❌ Request Setup Error:', error);\n  return Promise.reject(error);\n});\n\n// Enhanced response interceptor with detailed logging\napi.interceptors.response.use(response => {\n  console.log('✅ DIRECT API Response Success:');\n  console.log('  Status:', response.status);\n  console.log('  Headers:', response.headers);\n  console.log('  Data:', response.data);\n  return response;\n}, error => {\n  var _error$config, _error$config2, _error$response, _error$response2, _error$response3;\n  console.error('❌ DIRECT API Response Error:');\n  console.error('  Error Code:', error.code);\n  console.error('  Error Message:', error.message);\n  console.error('  Request URL:', (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url);\n  console.error('  Request Method:', (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method);\n  console.error('  Response Status:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n  console.error('  Response Headers:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.headers);\n  console.error('  Response Data:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n  console.error('  Full Error Object:', error);\n\n  // Detailed error analysis\n  if (error.code === 'ERR_NETWORK') {\n    console.error('🌐 Network Error - This usually means:');\n    console.error('   1. Backend server is not running');\n    console.error('   2. CORS is blocking the request');\n    console.error('   3. Firewall is blocking the connection');\n  } else if (error.code === 'ECONNABORTED') {\n    console.error('🕐 Request timed out after 30 seconds');\n  } else if (error.code === 'ECONNREFUSED') {\n    console.error('🚫 Connection refused - Backend server not running on port 5000');\n  } else if (!error.response) {\n    console.error('📡 No response received - Backend server might be down');\n  }\n  return Promise.reject(error);\n});\n\n// Test connection with multiple approaches\nexport const testBackendConnection = async () => {\n  console.log('🔍 Testing DIRECT backend connection...');\n  try {\n    // Test 1: Direct fetch to health endpoint\n    console.log('Test 1: Direct fetch to health endpoint');\n    const directResponse = await fetch('http://localhost:5000/api/health', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (directResponse.ok) {\n      const data = await directResponse.json();\n      console.log('✅ Direct fetch successful:', data);\n    } else {\n      console.error('❌ Direct fetch failed:', directResponse.status, directResponse.statusText);\n    }\n\n    // Test 2: Axios request\n    console.log('Test 2: Axios health check');\n    const healthResponse = await api.get('/health');\n    console.log('✅ Axios health check passed:', healthResponse.data);\n\n    // Test 3: Stats endpoint\n    console.log('Test 3: Stats endpoint');\n    const statsResponse = await api.get('/stats');\n    console.log('✅ Stats endpoint passed:', statsResponse.data);\n    return {\n      success: true,\n      message: 'Backend connection successful'\n    };\n  } catch (error) {\n    console.error('❌ Backend connection test failed:', error);\n\n    // Try alternative connection test\n    try {\n      console.log('🔄 Trying alternative connection test...');\n      const response = await fetch('http://localhost:5000/api/health');\n      const data = await response.json();\n      console.log('✅ Alternative test successful:', data);\n      return {\n        success: true,\n        message: 'Backend connection successful (via alternative method)'\n      };\n    } catch (altError) {\n      console.error('❌ Alternative test also failed:', altError);\n    }\n    return {\n      success: false,\n      message: error.message,\n      code: error.code,\n      details: error\n    };\n  }\n};\n\n// Enhanced upload function with multiple retry attempts\nexport const uploadDocument = async (file, documentType) => {\n  console.log('📤 Starting DIRECT document upload...');\n  console.log('  File:', file.name, file.size, 'bytes', file.type);\n  console.log('  Document Type:', documentType);\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('documentType', documentType);\n  console.log('📋 FormData created successfully');\n  try {\n    // Method 1: Try with axios\n    console.log('🔄 Attempting upload with axios...');\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        console.log(`📊 Upload progress: ${percentCompleted}%`);\n      }\n    });\n    console.log('✅ Axios upload successful:', response.data);\n    return response;\n  } catch (axiosError) {\n    console.error('❌ Axios upload failed:', axiosError);\n\n    // Method 2: Try with fetch as fallback\n    try {\n      console.log('🔄 Attempting upload with fetch as fallback...');\n      const fetchResponse = await fetch('http://localhost:5000/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await fetchResponse.json();\n      if (fetchResponse.ok) {\n        console.log('✅ Fetch upload successful:', data);\n        return {\n          data\n        };\n      } else {\n        console.error('❌ Fetch upload failed:', fetchResponse.status, data);\n        throw new Error(data.message || 'Upload failed');\n      }\n    } catch (fetchError) {\n      console.error('❌ Fetch upload also failed:', fetchError);\n      throw axiosError; // Throw the original axios error\n    }\n  }\n};\nexport const getSystemStats = async () => {\n  try {\n    return await api.get('/stats');\n  } catch (error) {\n    console.error('❌ Stats request failed, trying fetch fallback...');\n    const response = await fetch('http://localhost:5000/api/stats');\n    const data = await response.json();\n    return {\n      data\n    };\n  }\n};\nexport const healthCheck = async () => {\n  try {\n    return await api.get('/health');\n  } catch (error) {\n    console.error('❌ Health check failed, trying fetch fallback...');\n    const response = await fetch('http://localhost:5000/api/health');\n    const data = await response.json();\n    return {\n      data\n    };\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","defaults","common","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","_error$config","_error$config2","_error$response","_error$response2","_error$response3","code","message","testBackendConnection","directResponse","fetch","ok","json","statusText","healthResponse","get","statsResponse","success","altError","details","uploadDocument","file","documentType","name","size","type","formData","FormData","append","post","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","axiosError","fetchResponse","body","Error","fetchError","getSystemStats","healthCheck"],"sources":["C:/project/ocr/ocr2/ocrnew/newocr3/frontend/src/services/api-direct.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Direct connection API service (bypasses proxy issues)\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5000/api',\r\n    timeout: 30000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Add CORS headers to all requests\r\napi.defaults.headers.common['Access-Control-Allow-Origin'] = '*';\r\napi.defaults.headers.common['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS';\r\napi.defaults.headers.common['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept, Authorization';\r\n\r\n// Enhanced request interceptor with detailed logging\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        console.log('🚀 DIRECT API Request:');\r\n        console.log('  Method:', config.method?.toUpperCase());\r\n        console.log('  Full URL:', config.baseURL + config.url);\r\n        console.log('  Headers:', config.headers);\r\n        console.log('  Timeout:', config.timeout);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('❌ Request Setup Error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Enhanced response interceptor with detailed logging\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        console.log('✅ DIRECT API Response Success:');\r\n        console.log('  Status:', response.status);\r\n        console.log('  Headers:', response.headers);\r\n        console.log('  Data:', response.data);\r\n        return response;\r\n    },\r\n    (error) => {\r\n        console.error('❌ DIRECT API Response Error:');\r\n        console.error('  Error Code:', error.code);\r\n        console.error('  Error Message:', error.message);\r\n        console.error('  Request URL:', error.config?.url);\r\n        console.error('  Request Method:', error.config?.method);\r\n        console.error('  Response Status:', error.response?.status);\r\n        console.error('  Response Headers:', error.response?.headers);\r\n        console.error('  Response Data:', error.response?.data);\r\n        console.error('  Full Error Object:', error);\r\n\r\n        // Detailed error analysis\r\n        if (error.code === 'ERR_NETWORK') {\r\n            console.error('🌐 Network Error - This usually means:');\r\n            console.error('   1. Backend server is not running');\r\n            console.error('   2. CORS is blocking the request');\r\n            console.error('   3. Firewall is blocking the connection');\r\n        } else if (error.code === 'ECONNABORTED') {\r\n            console.error('🕐 Request timed out after 30 seconds');\r\n        } else if (error.code === 'ECONNREFUSED') {\r\n            console.error('🚫 Connection refused - Backend server not running on port 5000');\r\n        } else if (!error.response) {\r\n            console.error('📡 No response received - Backend server might be down');\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Test connection with multiple approaches\r\nexport const testBackendConnection = async () => {\r\n    console.log('🔍 Testing DIRECT backend connection...');\r\n\r\n    try {\r\n        // Test 1: Direct fetch to health endpoint\r\n        console.log('Test 1: Direct fetch to health endpoint');\r\n        const directResponse = await fetch('http://localhost:5000/api/health', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n\r\n        if (directResponse.ok) {\r\n            const data = await directResponse.json();\r\n            console.log('✅ Direct fetch successful:', data);\r\n        } else {\r\n            console.error('❌ Direct fetch failed:', directResponse.status, directResponse.statusText);\r\n        }\r\n\r\n        // Test 2: Axios request\r\n        console.log('Test 2: Axios health check');\r\n        const healthResponse = await api.get('/health');\r\n        console.log('✅ Axios health check passed:', healthResponse.data);\r\n\r\n        // Test 3: Stats endpoint\r\n        console.log('Test 3: Stats endpoint');\r\n        const statsResponse = await api.get('/stats');\r\n        console.log('✅ Stats endpoint passed:', statsResponse.data);\r\n\r\n        return { success: true, message: 'Backend connection successful' };\r\n\r\n    } catch (error) {\r\n        console.error('❌ Backend connection test failed:', error);\r\n\r\n        // Try alternative connection test\r\n        try {\r\n            console.log('🔄 Trying alternative connection test...');\r\n            const response = await fetch('http://localhost:5000/api/health');\r\n            const data = await response.json();\r\n            console.log('✅ Alternative test successful:', data);\r\n            return { success: true, message: 'Backend connection successful (via alternative method)' };\r\n        } catch (altError) {\r\n            console.error('❌ Alternative test also failed:', altError);\r\n        }\r\n\r\n        return {\r\n            success: false,\r\n            message: error.message,\r\n            code: error.code,\r\n            details: error\r\n        };\r\n    }\r\n};\r\n\r\n// Enhanced upload function with multiple retry attempts\r\nexport const uploadDocument = async (file, documentType) => {\r\n    console.log('📤 Starting DIRECT document upload...');\r\n    console.log('  File:', file.name, file.size, 'bytes', file.type);\r\n    console.log('  Document Type:', documentType);\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('documentType', documentType);\r\n\r\n    console.log('📋 FormData created successfully');\r\n\r\n    try {\r\n        // Method 1: Try with axios\r\n        console.log('🔄 Attempting upload with axios...');\r\n        const response = await api.post('/upload', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            onUploadProgress: (progressEvent) => {\r\n                const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                console.log(`📊 Upload progress: ${percentCompleted}%`);\r\n            }\r\n        });\r\n\r\n        console.log('✅ Axios upload successful:', response.data);\r\n        return response;\r\n\r\n    } catch (axiosError) {\r\n        console.error('❌ Axios upload failed:', axiosError);\r\n\r\n        // Method 2: Try with fetch as fallback\r\n        try {\r\n            console.log('🔄 Attempting upload with fetch as fallback...');\r\n            const fetchResponse = await fetch('http://localhost:5000/api/upload', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            const data = await fetchResponse.json();\r\n\r\n            if (fetchResponse.ok) {\r\n                console.log('✅ Fetch upload successful:', data);\r\n                return { data };\r\n            } else {\r\n                console.error('❌ Fetch upload failed:', fetchResponse.status, data);\r\n                throw new Error(data.message || 'Upload failed');\r\n            }\r\n\r\n        } catch (fetchError) {\r\n            console.error('❌ Fetch upload also failed:', fetchError);\r\n            throw axiosError; // Throw the original axios error\r\n        }\r\n    }\r\n};\r\n\r\nexport const getSystemStats = async () => {\r\n    try {\r\n        return await api.get('/stats');\r\n    } catch (error) {\r\n        console.error('❌ Stats request failed, trying fetch fallback...');\r\n        const response = await fetch('http://localhost:5000/api/stats');\r\n        const data = await response.json();\r\n        return { data };\r\n    }\r\n};\r\n\r\nexport const healthCheck = async () => {\r\n    try {\r\n        return await api.get('/health');\r\n    } catch (error) {\r\n        console.error('❌ Health check failed, trying fetch fallback...');\r\n        const response = await fetch('http://localhost:5000/api/health');\r\n        const data = await response.json();\r\n        return { data };\r\n    }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}