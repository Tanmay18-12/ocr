{"ast":null,"code":"import axios from 'axios';\n\n// Debug version of API service with detailed logging\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Enhanced request interceptor with detailed logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log('🚀 API Request Details:');\n  console.log('  Method:', (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase());\n  console.log('  URL:', config.baseURL + config.url);\n  console.log('  Headers:', config.headers);\n  console.log('  Data:', config.data);\n  return config;\n}, error => {\n  console.error('❌ Request Setup Error:', error);\n  return Promise.reject(error);\n});\n\n// Enhanced response interceptor with detailed logging\napi.interceptors.response.use(response => {\n  console.log('✅ API Response Success:');\n  console.log('  Status:', response.status);\n  console.log('  Data:', response.data);\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('❌ API Response Error:');\n  console.error('  Error Code:', error.code);\n  console.error('  Error Message:', error.message);\n  console.error('  Response Status:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n  console.error('  Response Data:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  console.error('  Full Error:', error);\n\n  // Specific error handling\n  if (error.code === 'ECONNABORTED') {\n    console.error('🕐 Request timed out after 30 seconds');\n  } else if (error.code === 'ECONNREFUSED') {\n    console.error('🚫 Connection refused - Backend server not running?');\n  } else if (error.code === 'NETWORK_ERROR') {\n    console.error('🌐 Network error - Check internet connection');\n  } else if (!error.response) {\n    console.error('📡 No response received - Backend server might be down');\n  }\n  return Promise.reject(error);\n});\n\n// Test connection function\nexport const testBackendConnection = async () => {\n  console.log('🔍 Testing backend connection...');\n  try {\n    // Test 1: Basic health check\n    console.log('Test 1: Health check');\n    const healthResponse = await api.get('/health');\n    console.log('✅ Health check passed:', healthResponse.data);\n\n    // Test 2: Stats endpoint\n    console.log('Test 2: Stats endpoint');\n    const statsResponse = await api.get('/stats');\n    console.log('✅ Stats endpoint passed:', statsResponse.data);\n    return {\n      success: true,\n      message: 'Backend connection successful'\n    };\n  } catch (error) {\n    console.error('❌ Backend connection test failed:', error);\n    return {\n      success: false,\n      message: error.message,\n      code: error.code,\n      details: error\n    };\n  }\n};\n\n// Enhanced upload function with detailed logging\nexport const uploadDocument = async (file, documentType) => {\n  console.log('📤 Starting document upload...');\n  console.log('  File:', file.name, file.size, 'bytes');\n  console.log('  Document Type:', documentType);\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('documentType', documentType);\n  console.log('📋 FormData contents:');\n  for (let [key, value] of formData.entries()) {\n    console.log(`  ${key}:`, value);\n  }\n  try {\n    const response = await api.post('/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        console.log(`📊 Upload progress: ${percentCompleted}%`);\n      }\n    });\n    console.log('✅ Upload successful:', response.data);\n    return response;\n  } catch (error) {\n    console.error('❌ Upload failed:', error);\n    throw error;\n  }\n};\nexport const getSystemStats = async () => {\n  return api.get('/stats');\n};\nexport const healthCheck = async () => {\n  return api.get('/health');\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","_error$response2","code","message","testBackendConnection","healthResponse","get","statsResponse","success","details","uploadDocument","file","documentType","name","size","formData","FormData","append","key","value","entries","post","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","getSystemStats","healthCheck"],"sources":["C:/project/ocr/ocr2/ocrnew/newocr3/frontend/src/services/api-debug.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Debug version of API service with detailed logging\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5000/api',\r\n    timeout: 30000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Enhanced request interceptor with detailed logging\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        console.log('🚀 API Request Details:');\r\n        console.log('  Method:', config.method?.toUpperCase());\r\n        console.log('  URL:', config.baseURL + config.url);\r\n        console.log('  Headers:', config.headers);\r\n        console.log('  Data:', config.data);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('❌ Request Setup Error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Enhanced response interceptor with detailed logging\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        console.log('✅ API Response Success:');\r\n        console.log('  Status:', response.status);\r\n        console.log('  Data:', response.data);\r\n        return response;\r\n    },\r\n    (error) => {\r\n        console.error('❌ API Response Error:');\r\n        console.error('  Error Code:', error.code);\r\n        console.error('  Error Message:', error.message);\r\n        console.error('  Response Status:', error.response?.status);\r\n        console.error('  Response Data:', error.response?.data);\r\n        console.error('  Full Error:', error);\r\n\r\n        // Specific error handling\r\n        if (error.code === 'ECONNABORTED') {\r\n            console.error('🕐 Request timed out after 30 seconds');\r\n        } else if (error.code === 'ECONNREFUSED') {\r\n            console.error('🚫 Connection refused - Backend server not running?');\r\n        } else if (error.code === 'NETWORK_ERROR') {\r\n            console.error('🌐 Network error - Check internet connection');\r\n        } else if (!error.response) {\r\n            console.error('📡 No response received - Backend server might be down');\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Test connection function\r\nexport const testBackendConnection = async () => {\r\n    console.log('🔍 Testing backend connection...');\r\n\r\n    try {\r\n        // Test 1: Basic health check\r\n        console.log('Test 1: Health check');\r\n        const healthResponse = await api.get('/health');\r\n        console.log('✅ Health check passed:', healthResponse.data);\r\n\r\n        // Test 2: Stats endpoint\r\n        console.log('Test 2: Stats endpoint');\r\n        const statsResponse = await api.get('/stats');\r\n        console.log('✅ Stats endpoint passed:', statsResponse.data);\r\n\r\n        return { success: true, message: 'Backend connection successful' };\r\n\r\n    } catch (error) {\r\n        console.error('❌ Backend connection test failed:', error);\r\n        return {\r\n            success: false,\r\n            message: error.message,\r\n            code: error.code,\r\n            details: error\r\n        };\r\n    }\r\n};\r\n\r\n// Enhanced upload function with detailed logging\r\nexport const uploadDocument = async (file, documentType) => {\r\n    console.log('📤 Starting document upload...');\r\n    console.log('  File:', file.name, file.size, 'bytes');\r\n    console.log('  Document Type:', documentType);\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('documentType', documentType);\r\n\r\n    console.log('📋 FormData contents:');\r\n    for (let [key, value] of formData.entries()) {\r\n        console.log(`  ${key}:`, value);\r\n    }\r\n\r\n    try {\r\n        const response = await api.post('/upload', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            },\r\n            onUploadProgress: (progressEvent) => {\r\n                const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                console.log(`📊 Upload progress: ${percentCompleted}%`);\r\n            }\r\n        });\r\n\r\n        console.log('✅ Upload successful:', response.data);\r\n        return response;\r\n\r\n    } catch (error) {\r\n        console.error('❌ Upload failed:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getSystemStats = async () => {\r\n    return api.get('/stats');\r\n};\r\n\r\nexport const healthCheck = async () => {\r\n    return api.get('/health');\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACRC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACtCD,OAAO,CAACC,GAAG,CAAC,WAAW,GAAAF,cAAA,GAAED,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,CAAC;EACtDH,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAACN,OAAO,GAAGM,MAAM,CAACM,GAAG,CAAC;EAClDJ,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,MAAM,CAACJ,OAAO,CAAC;EACzCM,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,MAAM,CAACO,IAAI,CAAC;EACnC,OAAOP,MAAM;AACjB,CAAC,EACAQ,KAAK,IAAK;EACPN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAC9C,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAhB,GAAG,CAACK,YAAY,CAACc,QAAQ,CAACZ,GAAG,CACxBY,QAAQ,IAAK;EACVT,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACtCD,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEQ,QAAQ,CAACC,MAAM,CAAC;EACzCV,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEQ,QAAQ,CAACJ,IAAI,CAAC;EACrC,OAAOI,QAAQ;AACnB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAK,eAAA,EAAAC,gBAAA;EACPZ,OAAO,CAACM,KAAK,CAAC,uBAAuB,CAAC;EACtCN,OAAO,CAACM,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACO,IAAI,CAAC;EAC1Cb,OAAO,CAACM,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACQ,OAAO,CAAC;EAChDd,OAAO,CAACM,KAAK,CAAC,oBAAoB,GAAAK,eAAA,GAAEL,KAAK,CAACG,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBD,MAAM,CAAC;EAC3DV,OAAO,CAACM,KAAK,CAAC,kBAAkB,GAAAM,gBAAA,GAAEN,KAAK,CAACG,QAAQ,cAAAG,gBAAA,uBAAdA,gBAAA,CAAgBP,IAAI,CAAC;EACvDL,OAAO,CAACM,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;;EAErC;EACA,IAAIA,KAAK,CAACO,IAAI,KAAK,cAAc,EAAE;IAC/Bb,OAAO,CAACM,KAAK,CAAC,uCAAuC,CAAC;EAC1D,CAAC,MAAM,IAAIA,KAAK,CAACO,IAAI,KAAK,cAAc,EAAE;IACtCb,OAAO,CAACM,KAAK,CAAC,qDAAqD,CAAC;EACxE,CAAC,MAAM,IAAIA,KAAK,CAACO,IAAI,KAAK,eAAe,EAAE;IACvCb,OAAO,CAACM,KAAK,CAAC,8CAA8C,CAAC;EACjE,CAAC,MAAM,IAAI,CAACA,KAAK,CAACG,QAAQ,EAAE;IACxBT,OAAO,CAACM,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,OAAO,MAAMS,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EAC7Cf,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EAE/C,IAAI;IACA;IACAD,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAMe,cAAc,GAAG,MAAM1B,GAAG,CAAC2B,GAAG,CAAC,SAAS,CAAC;IAC/CjB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEe,cAAc,CAACX,IAAI,CAAC;;IAE1D;IACAL,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,MAAMiB,aAAa,GAAG,MAAM5B,GAAG,CAAC2B,GAAG,CAAC,QAAQ,CAAC;IAC7CjB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEiB,aAAa,CAACb,IAAI,CAAC;IAE3D,OAAO;MAAEc,OAAO,EAAE,IAAI;MAAEL,OAAO,EAAE;IAAgC,CAAC;EAEtE,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO;MACHa,OAAO,EAAE,KAAK;MACdL,OAAO,EAAER,KAAK,CAACQ,OAAO;MACtBD,IAAI,EAAEP,KAAK,CAACO,IAAI;MAChBO,OAAO,EAAEd;IACb,CAAC;EACL;AACJ,CAAC;;AAED;AACA,OAAO,MAAMe,cAAc,GAAG,MAAAA,CAAOC,IAAI,EAAEC,YAAY,KAAK;EACxDvB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC7CD,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEqB,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACG,IAAI,EAAE,OAAO,CAAC;EACrDzB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEsB,YAAY,CAAC;EAE7C,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,IAAI,CAAC;EAC7BI,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAEL,YAAY,CAAC;EAE7CvB,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACpC,KAAK,IAAI,CAAC4B,GAAG,EAAEC,KAAK,CAAC,IAAIJ,QAAQ,CAACK,OAAO,CAAC,CAAC,EAAE;IACzC/B,OAAO,CAACC,GAAG,CAAC,KAAK4B,GAAG,GAAG,EAAEC,KAAK,CAAC;EACnC;EAEA,IAAI;IACA,MAAMrB,QAAQ,GAAG,MAAMnB,GAAG,CAAC0C,IAAI,CAAC,SAAS,EAAEN,QAAQ,EAAE;MACjDhC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDuC,gBAAgB,EAAGC,aAAa,IAAK;QACjC,MAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;QACvFvC,OAAO,CAACC,GAAG,CAAC,uBAAuBkC,gBAAgB,GAAG,CAAC;MAC3D;IACJ,CAAC,CAAC;IAEFnC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEQ,QAAQ,CAACJ,IAAI,CAAC;IAClD,OAAOI,QAAQ;EAEnB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMkC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,OAAOlD,GAAG,CAAC2B,GAAG,CAAC,QAAQ,CAAC;AAC5B,CAAC;AAED,OAAO,MAAMwB,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,OAAOnD,GAAG,CAAC2B,GAAG,CAAC,SAAS,CAAC;AAC7B,CAAC;AAED,eAAe3B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}