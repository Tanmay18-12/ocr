{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 30000,\n  // 30 second timeout for file uploads\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a test endpoint to check backend connectivity\nexport const testConnection = async () => {\n  try {\n    const response = await axios.get('http://localhost:5000/');\n    return response;\n  } catch (error) {\n    console.error('Backend connection test failed:', error);\n    throw error;\n  }\n};\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('Response error:', error);\n  if (error.code === 'ECONNABORTED') {\n    console.error('Request timeout');\n  } else if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 413) {\n    console.error('File too large');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500) {\n    console.error('Server error');\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const uploadDocument = async (file, documentType) => {\n  const formData = new FormData();\n  formData.append('file', file);\n  formData.append('documentType', documentType);\n  return api.post('/upload', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\nexport const checkDuplicate = async (documentNumber, documentType) => {\n  return api.post('/check-duplicate', {\n    documentNumber,\n    documentType\n  });\n};\nexport const getSystemStats = async () => {\n  return api.get('/stats');\n};\nexport const getUserDocuments = async userId => {\n  return api.get(`/user/${userId}/documents`);\n};\nexport const healthCheck = async () => {\n  return api.get('/health');\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","testConnection","response","get","error","console","interceptors","request","use","config","_config$method","log","method","toUpperCase","url","Promise","reject","_error$response","_error$response2","code","status","uploadDocument","file","documentType","formData","FormData","append","post","checkDuplicate","documentNumber","getSystemStats","getUserDocuments","userId","healthCheck"],"sources":["C:/project/ocr/ocr2/ocrnew/newocr3/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n    timeout: 30000, // 30 second timeout for file uploads\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Add a test endpoint to check backend connectivity\r\nexport const testConnection = async () => {\r\n    try {\r\n        const response = await axios.get('http://localhost:5000/');\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Backend connection test failed:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Request interceptor for logging\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        console.error('Request error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    (error) => {\r\n        console.error('Response error:', error);\r\n\r\n        if (error.code === 'ECONNABORTED') {\r\n            console.error('Request timeout');\r\n        } else if (error.response?.status === 413) {\r\n            console.error('File too large');\r\n        } else if (error.response?.status >= 500) {\r\n            console.error('Server error');\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// API endpoints\r\nexport const uploadDocument = async (file, documentType) => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('documentType', documentType);\r\n\r\n    return api.post('/upload', formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n        },\r\n    });\r\n};\r\n\r\nexport const checkDuplicate = async (documentNumber, documentType) => {\r\n    return api.post('/check-duplicate', {\r\n        documentNumber,\r\n        documentType,\r\n    });\r\n};\r\n\r\nexport const getSystemStats = async () => {\r\n    return api.get('/stats');\r\n};\r\n\r\nexport const getUserDocuments = async (userId) => {\r\n    return api.get(`/user/${userId}/documents`);\r\n};\r\n\r\nexport const healthCheck = async () => {\r\n    return api.get('/health');\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}